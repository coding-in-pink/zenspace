
<!DOCTYPE html>
<html>
  <head>
    <title>Zenspace</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css" rel="stylesheet" media="screen">
    <link rel='stylesheet', href='/css/style.css'>
      <style>
        .container {
          max-width: 1500px;
          padding-top:0px;
        }
        body {
          margin-left:10px;
          margin-right:10px;
          background-color: #FFFFFF ;
        }
        h1 {
           color: #19D175 ;
           text-align: center;
           font-family: "Dosis";
           font-size: 80px;
           font-height:60px;
           line-height:0em;
           padding:40px;
        }
        p {
           text-align: center;
           font-family: "Dosis";
           font-size: 20px;
        }
    </style>
    <script type='text/javascript', src='/js/browser-detect.js'></script>
    <script type='text/javascript', src='/js/jquery-1.11.1.min.js'></script>
    <script type='text/javascript', src='/js/speech-recognizer.js'></script>
    <script type='text/javascript', src='/js/socket.io.js'></script>
    <script type='text/javascript', src='/js/demo.js'></script>
  </head>

  <body>
    <h1>Zenspace</h1>
    </br>
    <div class="micButton" value="wait, loading video" disabled="disabled" onclick="startVideo()" id="startbutton"></div>
    <p class="micText">Press to start speaking</p>
    <div class = "errorMsg"></div>
    
    <script src="/js/utils.js"></script>
    <script src="/js/clmtrackr.min.js"></script>
    <script src="/js/model_pca_20_svm_emotionDetection.js"></script>
    <script src="/js/stats.min.js"></script>
    <script src="/js/d3.min.js"></script>
    <script src="/js/emotion_classifier.js"></script>
    <script src="/js/emotionmodel.js"></script>
    <script src="/js/d3.min.js"></script>
    <script src="/js/d3.layout.min.js"></script>
    <script src="/js/rickshaw.min.js"></script>

    <div id="content">
        <div id="container">
            <video id="videoel" width="100%" height="100%" preload="auto" loop>
            </video>
            <canvas id="overlay" width="100%" height="100%"></canvas>
        </div>
        <canvas id="sketch" width="100%" height="100%"></canvas>
        <script>
            var socket = io.connect(this.ws);

            var vid = document.getElementById('videoel');
            var overlay = document.getElementById('overlay');
            var overlayCC = overlay.getContext('2d');
            var averages = {
                angry: 0,
                sad: 0,
                surprised: 0,
                happy: 0
            }
            var average = 0;
            var count = 0;
            var total = 0;
            var avg = [];
            var index = 0;

            /********** check and set up video/webcam **********/
            function enablestart() {
                var startbutton = document.getElementById('startbutton');
                startbutton.value = "start";
                startbutton.disabled = null;
            }
            
            navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
            window.URL = window.URL || window.webkitURL || window.msURL || window.mozURL;
            // check for camerasupport
            if (navigator.getUserMedia) {
                // set up stream
                
                var videoSelector = {video : true};
                if (window.navigator.appVersion.match(/Chrome\/(.*?) /)) {
                    var chromeVersion = parseInt(window.navigator.appVersion.match(/Chrome\/(\d+)\./)[1], 10);
                    if (chromeVersion < 20) {
                        videoSelector = "video";
                    }
                };
            
                navigator.getUserMedia(videoSelector, function( stream ) {
                    if (vid.mozCaptureStream) {
                        vid.mozSrcObject = stream;
                    } else {
                        vid.src = (window.URL && window.URL.createObjectURL(stream)) || stream;
                    }
                    vid.play();
                }, function() {
                    //insertAltVideo(vid);
                    alert("There was some problem trying to fetch video from your webcam. If you have a webcam, please make sure to accept when the browser asks for access to your webcam.");
                });
            } else {
                //insertAltVideo(vid);
                alert("This demo depends on getUserMedia, which your browser does not seem to support. :(");
            }
            vid.addEventListener('canplay', enablestart, false);
            
            /*********** setup of emotion detection *************/
            var ctrack = new clm.tracker({useWebGL : true});
            ctrack.init(pModel);
            function startVideo() {
                // start video
                vid.play();
                // start tracking
                ctrack.start(vid);
                // start loop to draw face
                drawLoop();
                // startSpeechToText();
            }
            function drawLoop() {
                requestAnimFrame(drawLoop);
                if (index % 25 == 0) {
                    var cp = ctrack.getCurrentParameters();
                    var er = ec.meanPredict(cp);
                    
                    if (er) {
                        var value = er[1].value;
                        var ts = new Date().getTime();
                        count += 1;
                        total += value;
                        avg = total / count;

                        // Send data to the analysis socket room
                        socket.emit('facial-analysis', {
                            timestamp: ts,
                            current_value: value,
                            average: avg
                        });
                    }
                }
                index += 1;
            }
            
            var ec = new emotionClassifier();
            ec.init(emotionModel);
            var emotionData = ec.getBlank();    
            
        </script>
    </div>

  </body>
</html>
